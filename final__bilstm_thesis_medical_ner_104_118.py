# -*- coding: utf-8 -*-
"""Final__BiLSTM_Thesis_Medical_NER_104_118.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11LwawPKNT-TylMviAbj_92co2BidX0r1
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.14.0

!pip install seqeval==0.0.5
!pip install keras==2.2.4

!pip install git+https://www.github.com/keras-team/keras-contrib.git

from keras.models import *

from keras_contrib.layers import CRF

import tensorflow as tf
import keras

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt

dataset_path = '/content/drive/MyDrive/Medical-Entity-Recognition--master/CADEC.csv'
dataset_path_twitter = '/content/drive/MyDrive/Medical-Entity-Recognition--master/twitter_521.csv'
BATCH_SIZE = 512 # Number of examples used in each iteration
EPOCHS = 400 #Number of passes through entire dataset
MAX_LEN = 60  # Max length of review (in words)
EMBEDDING = 200# Dimension of word embedding vector

data_twitter = pd.read_csv(dataset_path_twitter, names=['Sentence No', 'Word', 'Tag'], header=0)
data = pd.read_csv(dataset_path)

data = data.drop(['Document ID'], axis=1)
data = data.append(data_twitter[0:5991], ignore_index=True) # Adding some of the twitter data in the cadec dataset to train better for the twitter data

data_twitter = data_twitter[5991:]# Remaining twitter data is for testing
print(data_twitter.shape)
print(data.shape)

data = data.fillna(method="ffill")
data_twitter = data_twitter.fillna(method="ffill")

print("Number of sentences: ", len(data.groupby(['Sentence No'])))
print("Number of sentences in twitter : ", len(data_twitter.groupby(['Sentence No'])))


words = list(set(data["Word"].values))
n_words = len(words)
print("Number of words in the dataset: ", n_words)
words_twitter = list(set(data_twitter["Word"].values))
n_words_twitter = len(words_twitter)
print("Number of words in the dataset: ", n_words_twitter)

tags = list(set(data["Tag"].values))
print("Tags:", tags)
n_tags = len(tags)
print("Number of Labels: ", n_tags)

print("Number of training datasets tags:")
data['Tag'].value_counts()

from random import shuffle
import random
class SentenceGetter(object):
    
    def __init__(self, data):
        
        self.n_sent = 1
        self.data = data
        self.empty = False
        agg_func = lambda s: [(w, t) for w, t in zip(s["Word"].values.tolist(),
                                                           s["Tag"].values.tolist())]                                                 
        self.grouped = self.data.groupby("Sentence No").apply(agg_func)
        self.sentences = [s for s in self.grouped]
    
    def get_next(self):
        """Return one sentence"""
        try:
            s = self.grouped["Sentence: {}".format(self.n_sent)]
            self.n_sent += 1
            return s
        except:
            return None
        
getter = SentenceGetter(data)
getter_twitter = SentenceGetter(data_twitter)
sent = getter.get_next()# Get all the sentences
sentences = getter.sentences
sentences_twitter = getter_twitter.sentences#tesing all sentences


print(sentences_twitter)
sentences = random.sample(sentences, len(sentences)) # Shuffling the cadec and twitter dataset for better training
print('length of senteces:')
print(len(sentences))
#sentences

# Plot sentence by lenght
plt.hist([len(s) for s in sentences], bins=10)
plt.title('Token per sentence')
plt.xlabel('Len (number of token)')
plt.ylabel('# samples')
plt.show()

# Vocabulary Key:word -> Value:token_index
# The first 2 entries are reserved for PAD and UNK
word2idx = {w: i + 2 for i, w in enumerate(words)}
#print(word2idx)
word2idx["UNK"] = 1 # Unknown words
word2idx["PAD"] = 0 # Padding
word2idx
word2idx_twitter = {w: i + 2 for i, w in enumerate(words_twitter)}
word2idx_twitter["UNK"] = 1 # Unknown words
word2idx_twitter["PAD"] = 0 # Padding
word2idx_twitter




# Vocabulary Key:token_index -> Value:word
idx2word_twitter = {i: w for w, i in word2idx_twitter.items()}#dictionary
idx2word_twitter
idx2word = {i: w for w, i in word2idx.items()}
idx2word

# Vocabulary Key:Label/Tag -> Value:tag_index
# The first entry is reserved for PAD
tag2idx = {t: i+1 for i, t in enumerate(tags)}
tag2idx["PAD"] = 0
tag2idx


# Vocabulary Key:tag_index -> Value:Label/Tag
idx2tag = {i: w for w, i in tag2idx.items()}
idx2tag


print("The word Drugs is identified by the index: {}".format(word2idx["Drug"]))
print("The labels B-Symptom(which defines Symptom related Enitities) is identified by the index: {}".format(tag2idx["B-Symptom"]))

from keras.preprocessing.sequence import pad_sequences
# Convert each sentence from list of Token to list of word_index
X = [[word2idx[w[0]] for w in s] for s in sentences] #all cadec part

# Padding each sentence to have the same lenght
X = pad_sequences(maxlen=MAX_LEN, sequences=X, padding="post", value=word2idx["PAD"]) #all cadec part

X_twitter = [[word2idx_twitter[w[0]] for w in s] for s in sentences_twitter]

# Padding each sentence to have the same lenght
X_twitter = pad_sequences(maxlen=MAX_LEN, sequences=X_twitter, padding="post", value=word2idx_twitter["PAD"])


# Convert Tag/Label to tag_index
y = [[tag2idx[w[1]] for w in s] for s in sentences]
# Padding each sentence to have the same length
y = pad_sequences(maxlen=MAX_LEN, sequences=y, padding="post", value=tag2idx["PAD"])

from keras.utils import to_categorical
# One-Hot encode
y = [to_categorical(i, num_classes=n_tags+1) for i in y]  # n_tags+1(PAD)


y_twitter = [[tag2idx[w[1]] for w in s] for s in sentences_twitter]
# Padding each sentence to have the same length
y_twitter = pad_sequences(maxlen=MAX_LEN, sequences=y_twitter, padding="post", value=tag2idx["PAD"])
from keras.utils import to_categorical
# One-Hot encode
y_twitter = [to_categorical(i, num_classes=n_tags+1) for i in y_twitter]  # n_tags+1(PAD)

from sklearn.model_selection import train_test_split

X_tr, X_te = X, X_twitter #both cadec and tweeter are used for train and test
y_tr, y_te = y, y_twitter #both cadec and tweeter are used for train and test


X_tr.shape, X_te.shape, np.array(y_tr).shape, np.array(y_te).shape

print(sentences_twitter)

!pip install sklearn-crfsuite

from keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional
from keras_contrib.layers import CRF
from keras.callbacks import ModelCheckpoint

# Model definition
input = Input(shape=(MAX_LEN,))
print(input)
input
model = Embedding(input_dim=n_words+2, output_dim=EMBEDDING, # n_words + 2 (PAD & UNK)
                  input_length=MAX_LEN, mask_zero=True)(input) 
model = Bidirectional(LSTM(units=50, return_sequences=True,
                           recurrent_dropout=0.1))(model)  # variational biLST
model = TimeDistributed(Dense(50, activation="relu"))(model)  # a dense layer as suggested by neuralNer
crf = CRF(n_tags+1)  # CRF layer, n_tags+1(PAD)
out = crf(model)  # output
filepath="weights.best.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
callbacks_list = [checkpoint]

model = Model(input, out)
model.compile(optimizer="rmsprop", loss=crf.loss_function, metrics=[crf.accuracy])

model.summary()

history = model.fit(X_tr, np.array(y_tr), batch_size=BATCH_SIZE, epochs=EPOCHS,validation_split=0.0, callbacks=callbacks_list,verbose=2)
training_loss = history.history['loss']
epoch_count = range(1, len(training_loss) + 1)
# Visualize loss history
plt.title("Loss function vs Epoch Grapgh of BiDirectional LSTM")
plt.plot(epoch_count, training_loss, 'r--')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show();

val="flu and osteoarthritis coronary virus is   dangerous for health "

val = [[word2idx[w] for w in val.split()]]
# Padding each sentence to have the same lenght
val = pad_sequences(maxlen=MAX_LEN, sequences=val, padding="post", value=word2idx["PAD"])

print(val)

k = model.predict(val)

k= np.argmax(k, axis=-1)
k = [[idx2tag[i] for i in row] for row in k]
print(k)

# model Evaluation
pred_cat = model.predict(X_te) #X_te
print(pred_cat.shape)
pred = np.argmax(pred_cat, axis=-1)
y_te_true = np.argmax(y_te, -1)

!pip install sklearn-crfsuite

# Convert the index to tag
pred_tag = [[idx2tag[i] for i in row] for row in pred]
y_te_true_tag = [[idx2tag[i] for i in row] for row in y_te_true]

from inspect import TPFLAGS_IS_ABSTRACT
tp = 0
total = 0

for i in range(0,len(pred_tag)):
    for j in range(0,len(pred_tag[0])):      
      if y_te_true_tag[i][j] == pred_tag[i][j]:
        tp += 1
      total += 1

from sklearn_crfsuite.metrics import flat_classification_report
from sklearn import metrics
#import sklearn.metrics
from seqeval.metrics import classification_report


print("===========================")
print(" Accuracy : ",float(((tp)*100)/total),"% ")

labels = np.unique(pred_tag+y_te_true_tag)

# Import label encoder
from sklearn import preprocessing
 
# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()
 
# Encode labels in column 'species'.
encoded_label= label_encoder.fit(labels)
y_true =[]
y_pred = []
for i in pred_tag:
  y_true.extend(label_encoder.transform(i))

for i in y_te_true_tag:
  y_pred.extend(label_encoder.transform(i))

len(pred_tag)

from sklearn.metrics import confusion_matrix

confusion_matrix(y_true, y_pred)

